go.property("player_lives", 3)
go.property("score", 0)
local score_thresholds = {5000, 20000, 100000}
local score_threshold_counter = 1

local function game_over(self, complete)
	print("game_over")
	msg.post("main:/game_loader#pause", "pause_from_game_over", {value = complete})
	msg.post("main:/controller#main_controller", "submit_score", {value = self.score})
	--[[
	local score_file = sys.get_save_file("thesevenstars", "scores")
	local scores = sys.load(score_file)
	if self.score > scores.highscore then
		local ok = sys.save(score_file, {highscore = self.score})
		if not ok then
			print("Failed to save", score_file)
			return
		end
	end
	]]--
end

function init(self)
	self.player = factory.create("#player_spawner", vmath.vector3(512, 0, 0))
	sound.play("#level_music_intro", {gain = 0.3})

	local score_file = sys.get_save_file("thesevenstars", "scores")
	local scores = sys.load(score_file)
	print(scores.highscore)
	print(scores.name)
	msg.post("hud#hud", "set_high_score", {value = scores.highscore, name = scores.name})
	
	timer.delay(5, false, function()
		factory.create("#enemy1_spawner", vmath.vector3(600, 440, 0))
		factory.create("#enemy1_spawner", vmath.vector3(625, 480, 0))
		factory.create("#enemy1_spawner", vmath.vector3(650, 520, 0))
	end)

	timer.delay(7, false, function()
		factory.create("#enemy1_spawner", vmath.vector3(600, 440, 0))
		factory.create("#enemy1_spawner", vmath.vector3(625, 480, 0))
		factory.create("#enemy1_spawner", vmath.vector3(650, 520, 0))
	end)

	timer.delay(8, false, function()
		factory.create("#enemy3_spawner", vmath.vector3(400, 440, 0))
	end)

	timer.delay(13, false, function()
		factory.create("#enemy1_spawner", vmath.vector3(500, 440, 0))
		factory.create("#enemy1_spawner", vmath.vector3(500, 480, 0))
		factory.create("#enemy1_spawner", vmath.vector3(500, 520, 0))
	end)
	
	timer.delay(15, false, function()
		factory.create("#enemy1_spawner", vmath.vector3(600, 440, 0))
		factory.create("#enemy1_spawner", vmath.vector3(625, 480, 0))
		factory.create("#enemy1_spawner", vmath.vector3(650, 520, 0))
	end)

	timer.delay(17, false, function()
		factory.create("#enemy2_spawner", vmath.vector3(600, 440, 0))
	end)

	timer.delay(22, false, function()
		factory.create("#enemy2_spawner", vmath.vector3(400, 440, 0))
		factory.create("#enemy2_spawner", vmath.vector3(500, 480, 0))
		factory.create("#enemy2_spawner", vmath.vector3(600, 520, 0))
	end)

	timer.delay(30, false, function()
		factory.create("#enemy2_spawner", vmath.vector3(400, 440, 0))
		factory.create("#enemy2_spawner", vmath.vector3(500, 480, 0))
		factory.create("#enemy2_spawner", vmath.vector3(600, 520, 0))
		factory.create("#enemy1_spawner", vmath.vector3(600, 440, 0))
		factory.create("#enemy1_spawner", vmath.vector3(625, 480, 0))
		factory.create("#enemy1_spawner", vmath.vector3(650, 520, 0))
	end)
	
	timer.delay(32, false, function()
		factory.create("#enemy1_spawner", vmath.vector3(350, 440, 0))
		factory.create("#enemy1_spawner", vmath.vector3(350, 480, 0))
		factory.create("#enemy1_spawner", vmath.vector3(350, 520, 0))
		factory.create("#enemy2_spawner", vmath.vector3(450, 440, 0))
		factory.create("#enemy2_spawner", vmath.vector3(550, 480, 0))
		factory.create("#enemy2_spawner", vmath.vector3(650, 520, 0))
	end)

	timer.delay(32, false, function()
		factory.create("#enemy3_spawner", vmath.vector3(370, 440, 0))
		factory.create("#enemy2_spawner", vmath.vector3(600, 480, 0))
	end)

	timer.delay(38, false, function()
		factory.create("#enemy1_spawner", vmath.vector3(400, 440, 0))
		factory.create("#enemy1_spawner", vmath.vector3(420, 480, 0))
		factory.create("#enemy1_spawner", vmath.vector3(440, 520, 0))
		
		factory.create("#enemy2_spawner", vmath.vector3(450, 440, 0))
		factory.create("#enemy2_spawner", vmath.vector3(550, 480, 0))
		factory.create("#enemy2_spawner", vmath.vector3(650, 520, 0))
	end)

	timer.delay(40, false, function()
		factory.create("#enemy3_spawner", vmath.vector3(550, 480, 0))
		factory.create("#enemy3_spawner", vmath.vector3(650, 520, 0))

		factory.create("#enemy1_spawner", vmath.vector3(500, 440, 0))
		factory.create("#enemy1_spawner", vmath.vector3(470, 480, 0))
		factory.create("#enemy1_spawner", vmath.vector3(530, 480, 0))
	end)

	timer.delay(65, false, function()
		game_over(self, true)
	end)
end


function on_message(self, message_id, message, sender)
	if message_id == hash("stop_input") then
		msg.post(self.player, "stop_input")
		sound.pause("#level_music_intro", true)
	end
	
	if message_id == hash("start_input") then
		msg.post(self.player, "start_input")
		sound.pause("#level_music_intro", false)
	end
	
	if message_id == hash("increase_score") then
		print("level controller script has received message to add score")
		self.score = self.score + message.value

		if self.score >= score_thresholds[score_threshold_counter] then
			msg.post("#", "change_life", {value = 1})
			score_threshold_counter = score_threshold_counter + 1
			msg.post("hud#hud", "set_threshold", {value = score_thresholds[score_threshold_counter]})
		end
		
		print("score is", self.score)
		msg.post("hud#hud", "set_score", {value = self.score})
	end
	
	if message_id == hash("change_life") then
		print("level controller script has received message to change life")
		print("life count is", self.player_lives)
		self.player_lives = self.player_lives + message.value
		msg.post("hud#hud", "set_lives", {value = self.player_lives})
		if self.player_lives <= 0 then
			game_over(self, false)
		end
	end

	if message_id == hash("return_player_position") then
		self.player_pos = go.get_position(self.player)
		msg.post(sender, "receive_position", {value = self.player_pos})
	end
end